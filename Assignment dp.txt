Assignment dp

Answer1
package dpAssignment1;

public class Q1 {
	/*
	 * ref leetcode 70 Q1. There are n stairs, a person standing at the bottom wants
	 * to reach the top. The person can climb either 1,2,3...m stairs at a time
	 * where m is a user given integer. Count the number of ways the person can
	 * reach the top.
	 * 
	 * input : n=5,m=3 output : 7
	 */

	public static void main(String[] args) {
		int n = 5;
		int m = 3;
		int ways = countWays(n, m);
		System.out.println("Number of ways : " + ways);
	}

	private static int countWays(int n, int m) {
		int[] dp = new int[n + 1];
		dp[0] = 1;

		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= m && j <= i; j++) {
				dp[i] = dp[i] + dp[i - j];
			}
		}
		return dp[n-1];
	}
}

Answer2
package dpAssignment1;

public class Q2 {
	/*
	 * leetcode 1137* The Tribonacci sequence Tn is defined as follows: T0 = 0, T1 =
	 * 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.
	 * 
	 * Given n, return the value of Tn. Example 1: Input: n = 4 Output: 4
	 * Explanation: T_3 = 0 + 1 + 1 = 2 T_4 = 1 + 1 + 2 = 4 
	 * Example 2: Input: n = 25
	 * Output: 1389537
	 */

	public static void main(String[] args) {
		int n = 25;

		int result = findTribonacci(n);
		System.out.println(result);
	}

	private static int findTribonacci(int n) {
		int[] dp = new int[40];
		dp[0] = 0;
		dp[1] = 1;
		dp[2] = 1;
		dp[3] = 2;

		for (int i = 4; i <= n; i++) {
			dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];
		}
		return dp[n];
	}
}

Answer3
package dpAssignment1;

public class Q3 {
	/*
	 * leetcode 198* You are a professional robber planning to rob houses along a
	 * street. Each house has a certain amount of money stashed, the only constraint
	 * stopping you from robbing each of them is that adjacent houses have security
	 * systems connected and it will automatically contact the police if two
	 * adjacent houses were broken into on the same night.
	 * 
	 * Given an integer array nums representing the amount of money of each house,
	 * return the maximum amount of money you can rob tonight without alerting the
	 * police.
	 * 
	 * 
	 * 
	 * Example 1:
	 * 
	 * Input: nums = [1,2,3,1] Output: 4 Explanation: Rob house 1 (money = 1) and
	 * then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4. Example
	 * 2:
	 * 
	 * Input: nums = [2,7,9,3,1] Output: 12 Explanation: Rob house 1 (money = 2),
	 * rob house 3 (money = 9) and rob house 5 (money = 1). Total amount you can rob
	 * = 2 + 9 + 1 = 12.
	 */

	public static void main(String[] args) {
		int[] nums = { 2,7,9,3,1 };
		int total = rob(nums);
		System.out.println(total);
	}

	private static int rob(int[] nums) {
		int n = nums.length;
		// if only one house
		if (n == 1)
			return nums[0];

		int[] dp = new int[n];
		dp[0] = nums[0];
		dp[1] = Math.max(nums[0], nums[1]);

		for (int i = 2; i < n; i++) {
			dp[i] = Math.max(nums[i] + dp[i - 2], dp[i - 1]);
		}
		return dp[n - 1];
	}
}

Answer4
package dpAssignment1;

public class Q4 {
	/*
	 * leetcode 62 There is a robot on an m x n grid. The robot is initially located
	 * at the top-left corner (i.e., grid[0][0]). The robot tries to move to the
	 * bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move
	 * either down or right at any point in time.
	 * 
	 * Given the two integers m and n, return the number of possible unique paths
	 * that the robot can take to reach the bottom-right corner.
	 * 
	 * The test cases are generated so that the answer will be less than or equal to
	 * 2 * 109.
	 * 
	 * 
	 * 
	 * Example 1:
	 * 
	 * 
	 * Input: m = 3, n = 7 Output: 28 Example 2:
	 * 
	 * Input: m = 3, n = 2 Output: 3 Explanation: From the top-left corner, there
	 * are a total of 3 ways to reach the bottom-right corner: 1. Right -> Down ->
	 * Down 2. Down -> Down -> Right 3. Down -> Right -> Down
	 */

	public static void main(String[] args) {
		int m = 3, n = 2;
		int result = uniquePaths(m, n);
		System.out.println(result);
	}

	private static int uniquePaths(int m, int n) {
		int[][] dp = new int[m][n];

		// make each first row element 1
		for (int i = 0; i < n; i++)
			dp[0][i] = 1;
		// make each first column element 1
		for (int i = 0; i < m; i++)
			dp[i][0] = 1;

		for (int i = 1; i < m; i++) {
			for (int j = 1; j < n; j++) {
				// ..... // top element + right element
				dp[i][j] = dp[i][j - 1] + dp[i - 1][j];
			}
		}

		return dp[m - 1][n - 1];
	}
}

Answer5
package dpAssignment1;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Q5 {
	/*
	 * leetcode 120. Given a triangle array, return the minimum path sum from top to
	 * bottom.
	 * For each step, you may move to an adjacent number of the row below. More
	 * formally, if you are on index i on the current row, you may move to either
	 * index i or index i + 1 on the next row. Example 1:
	 * 
	 * Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]] Output: 11 Explanation: The
	 * triangle looks like: 2 3 4 6 5 7 4 1 8 3 The minimum path sum from top to
	 * bottom is 2 + 3 + 5 + 1 = 11 (underlined above). Example 2:
	 * 
	 * Input: triangle = [[-10]] Output: -10
	 */

	public static void main(String[] args) {
		List<List<Integer>> triangle = new ArrayList<>();
		triangle.add(Arrays.asList(2));
		triangle.add(Arrays.asList(3, 4));
		triangle.add(Arrays.asList(6, 5, 7));
		triangle.add(Arrays.asList(4, 1, 8, 3));

		int result = minimumTotal(triangle);
		System.out.println(result);
	}

	private static int minimumTotal(List<List<Integer>> triangle) {
		// base case
		if (triangle == null || triangle.isEmpty())
			return 0;

		int rows = triangle.size();

		// array to store minimum path of each cell
		int[][] dp = new int[rows][rows];

		// last row of triangle will have same minimum path
		// so we put last row as it is to dp array
		List<Integer> lastRow = triangle.get(rows - 1);
		for (int i = 0; i < rows; i++) {
			dp[rows - 1][i] = lastRow.get(i);
		}

		// bottopm up dp approach : now we start from second last row
		// here i = row and j = column
		for (int i = rows - 2; i >= 0; i--) {
			List<Integer> currentRow = triangle.get(i);
			for (int j = 0; j < currentRow.size(); j++) {
				// now we add = current col element + min ( bottom j or j+1 )element
				// i+1 used to go to respective bottom row j & j+1 to select min appropriate
				// element
				dp[i][j] = currentRow.get(j) + Math.min(dp[i + 1][j], dp[i + 1][j + 1]);
			}
		}

		// minimum sum will be stored at the top of dp array [0][0]
		return dp[0][0];
	}
}